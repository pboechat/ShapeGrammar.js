shapegrammar.parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Production: peg$parseProduction },
        peg$startRuleFunction  = peg$parseProduction,

        peg$c0 = { type: "other", description: "production" },
        peg$c1 = "-->",
        peg$c2 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c3 = function(predecessor, successor) {
          	return { predecessor: predecessor, successor: successor };
          },
        peg$c4 = { type: "other", description: "successor" },
        peg$c5 = { type: "other", description: "identifier" },
        peg$c6 = /^[a-zA-Z]/,
        peg$c7 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c8 = function(value) { return value.join(""); },
        peg$c9 = { type: "other", description: "shape_operation" },
        peg$c10 = "extrude",
        peg$c11 = { type: "literal", value: "extrude", description: "\"extrude\"" },
        peg$c12 = "comp",
        peg$c13 = { type: "literal", value: "comp", description: "\"comp\"" },
        peg$c14 = "split",
        peg$c15 = { type: "literal", value: "split", description: "\"split\"" },
        peg$c16 = "s",
        peg$c17 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c18 = "r",
        peg$c19 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c20 = "t",
        peg$c21 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c22 = "(",
        peg$c23 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c24 = ",",
        peg$c25 = { type: "literal", value: ",", description: "\",\"" },
        peg$c26 = ")",
        peg$c27 = { type: "literal", value: ")", description: "\")\"" },
        peg$c28 = "{",
        peg$c29 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c30 = ":",
        peg$c31 = { type: "literal", value: ":", description: "\":\"" },
        peg$c32 = "|",
        peg$c33 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c34 = "}",
        peg$c35 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c36 = function(operator, args0, args1) {
            	var parameters = [];
                if (args0.length > 0) {
                	parameters.push(args0[0]);
                    var field = args0[1];
                    for (var i = 0; i < field.length; i++) {
                    	parameters.push(field[i][3]);
                    }
                }
                var operations = [];
                // multiple operations
                if (args1[1].constructor === Array) {
                	var field = args1[1][2];
                    var operationParam = (field[0].length > 0) ? field[0][0] : null;
                    var operationValue = field[1];
                	operations.push({ parameter: operationParam, value: operationValue });
                    for (var i = 0; i < args1[1][3].length; i++) {
                    	field = args1[1][3][i][3];
                    	operationParam = (field[0].length > 0) ? field[0][0] : null;
                        operationValue = field[1]; 
                    	operations.push({ parameter: operationParam, value: operationValue });
                    }
                }
                // single operation
                else {
                	operations.push(args1[1]);
                }
            	return { operator: operator, parameters: parameters, operations: operations };
            },
        peg$c37 = { type: "other", description: "expression" },
        peg$c38 = "+",
        peg$c39 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c40 = "-",
        peg$c41 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c42 = "*",
        peg$c43 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c44 = "/",
        peg$c45 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c46 = "%",
        peg$c47 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c48 = "^",
        peg$c49 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c50 = function(head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                if (tail[i][1] === "+") { result += tail[i][3]; }
                if (tail[i][1] === "-") { result -= tail[i][3]; }
                if (tail[i][1] === "*") { result *= tail[i][3]; }
                if (tail[i][1] === "/") { result /= tail[i][3]; }
                if (tail[i][1] === "%") { result = result % tail[i][3]; }
                if (tail[i][1] === "^") { result = Math.pow(result, tail[i][3]); }
                else { throw new Exception("unknown expression"); }
              }
              return result;
            },
        peg$c51 = { type: "other", description: "axis" },
        peg$c52 = "X",
        peg$c53 = { type: "literal", value: "X", description: "\"X\"" },
        peg$c54 = "Y",
        peg$c55 = { type: "literal", value: "Y", description: "\"Y\"" },
        peg$c56 = "Z",
        peg$c57 = { type: "literal", value: "Z", description: "\"Z\"" },
        peg$c58 = { type: "other", description: "factor" },
        peg$c59 = function(expression) { return expression; },
        peg$c60 = { type: "other", description: "float" },
        peg$c61 = /^[0-9]/,
        peg$c62 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c63 = ".",
        peg$c64 = { type: "literal", value: ".", description: "\".\"" },
        peg$c65 = function() { return parseFloat(text()); },
        peg$c66 = { type: "other", description: "whitespace" },
        peg$c67 = /^[ \t\n\r]/,
        peg$c68 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseProduction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c1) {
              s4 = peg$c1;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c2); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSuccessor();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c3(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }

      return s0;
    }

    function peg$parseSuccessor() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseShapeOperation();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifier();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parseShapeOperation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c14) {
            s1 = peg$c14;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 115) {
              s1 = peg$c16;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 114) {
                s1 = peg$c18;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 116) {
                  s1 = peg$c20;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c21); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c22;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parse_();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s10 = peg$c24;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse_();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseExpression();
                      if (s12 !== peg$FAILED) {
                        s9 = [s9, s10, s11, s12];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c24;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseExpression();
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c26;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c27); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s11 = peg$c28;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$currPos;
                          s14 = peg$currPos;
                          s15 = peg$parseFloat();
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parse_();
                            if (s16 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s17 = peg$c30;
                                peg$currPos++;
                              } else {
                                s17 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c31); }
                              }
                              if (s17 !== peg$FAILED) {
                                s18 = peg$parse_();
                                if (s18 !== peg$FAILED) {
                                  s15 = [s15, s16, s17, s18];
                                  s14 = s15;
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s14;
                            s14 = peg$FAILED;
                          }
                          if (s14 === peg$FAILED) {
                            s14 = null;
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parseSuccessor();
                            if (s15 !== peg$FAILED) {
                              s14 = [s14, s15];
                              s13 = s14;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = [];
                            s15 = peg$currPos;
                            s16 = peg$parse_();
                            if (s16 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 124) {
                                s17 = peg$c32;
                                peg$currPos++;
                              } else {
                                s17 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c33); }
                              }
                              if (s17 !== peg$FAILED) {
                                s18 = peg$parse_();
                                if (s18 !== peg$FAILED) {
                                  s19 = peg$currPos;
                                  s20 = peg$currPos;
                                  s21 = peg$parseFloat();
                                  if (s21 !== peg$FAILED) {
                                    s22 = peg$parse_();
                                    if (s22 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s23 = peg$c30;
                                        peg$currPos++;
                                      } else {
                                        s23 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                      }
                                      if (s23 !== peg$FAILED) {
                                        s24 = peg$parse_();
                                        if (s24 !== peg$FAILED) {
                                          s21 = [s21, s22, s23, s24];
                                          s20 = s21;
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s20;
                                        s20 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s20;
                                      s20 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s20;
                                    s20 = peg$FAILED;
                                  }
                                  if (s20 === peg$FAILED) {
                                    s20 = null;
                                  }
                                  if (s20 !== peg$FAILED) {
                                    s21 = peg$parseSuccessor();
                                    if (s21 !== peg$FAILED) {
                                      s20 = [s20, s21];
                                      s19 = s20;
                                    } else {
                                      peg$currPos = s19;
                                      s19 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s19;
                                    s19 = peg$FAILED;
                                  }
                                  if (s19 !== peg$FAILED) {
                                    s16 = [s16, s17, s18, s19];
                                    s15 = s16;
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                            while (s15 !== peg$FAILED) {
                              s14.push(s15);
                              s15 = peg$currPos;
                              s16 = peg$parse_();
                              if (s16 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 124) {
                                  s17 = peg$c32;
                                  peg$currPos++;
                                } else {
                                  s17 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                                }
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$parse_();
                                  if (s18 !== peg$FAILED) {
                                    s19 = peg$currPos;
                                    s20 = peg$currPos;
                                    s21 = peg$parseFloat();
                                    if (s21 !== peg$FAILED) {
                                      s22 = peg$parse_();
                                      if (s22 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                          s23 = peg$c30;
                                          peg$currPos++;
                                        } else {
                                          s23 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                        }
                                        if (s23 !== peg$FAILED) {
                                          s24 = peg$parse_();
                                          if (s24 !== peg$FAILED) {
                                            s21 = [s21, s22, s23, s24];
                                            s20 = s21;
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s20;
                                        s20 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s20;
                                      s20 = peg$FAILED;
                                    }
                                    if (s20 === peg$FAILED) {
                                      s20 = null;
                                    }
                                    if (s20 !== peg$FAILED) {
                                      s21 = peg$parseSuccessor();
                                      if (s21 !== peg$FAILED) {
                                        s20 = [s20, s21];
                                        s19 = s20;
                                      } else {
                                        peg$currPos = s19;
                                        s19 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s19;
                                      s19 = peg$FAILED;
                                    }
                                    if (s19 !== peg$FAILED) {
                                      s16 = [s16, s17, s18, s19];
                                      s15 = s16;
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parse_();
                              if (s15 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                  s16 = peg$c34;
                                  peg$currPos++;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s11 = [s11, s12, s13, s14, s15, s16];
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = peg$parseSuccessor();
                      }
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c36(s1, s5, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseFactor();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c38;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c40;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s5 = peg$c42;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s5 = peg$c44;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s5 = peg$c46;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                      s5 = peg$c48;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c49); }
                    }
                  }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseFactor();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c38;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c40;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s5 = peg$c42;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s5 = peg$c44;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 37) {
                      s5 = peg$c46;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c47); }
                    }
                    if (s5 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 94) {
                        s5 = peg$c48;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                      }
                    }
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseFactor();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }

      return s0;
    }

    function peg$parseAxis() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 88) {
        s0 = peg$c52;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 89) {
          s0 = peg$c54;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 90) {
            s0 = peg$c56;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }

      return s0;
    }

    function peg$parseFactor() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c26;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c59(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseAxis();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFloat();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parseFloat() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c61.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c65();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c67.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
